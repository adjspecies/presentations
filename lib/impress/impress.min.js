/**
 * impress.js
 *
 * impress.js is a presentation tool based on the power of CSS3 transforms and transitions
 * in modern browsers and inspired by the idea behind prezi.com.
 *
 *
 * Copyright 2011-2012 Bartek Szopka (@bartaz), 2016-2018 Henrik Ingo (@henrikingo)
 *
 * Released under the MIT and GPL Licenses.
 *
 * ------------------------------------------------
 *  author:  Bartek Szopka, Henrik Ingo
 *  version: 1.0.0
 *  url:     http://impress.js.org
 *  source:  http://github.com/impress/impress.js/
 */ // You are one of those who like to know how things work inside?
// Let me show you the cogs that make impress.js run...
// THAT'S ALL FOLKS!
//
// Thanks for reading it all.
// Or thanks for scrolling down and reading the last part.
//
// I've learnt a lot when building impress.js and I hope this code and comments
// will help somebody learn at least some part of it.
/**
 * Garbage collection utility
 *
 * This library allows plugins to add elements and event listeners they add to the DOM. The user
 * can call `impress().lib.gc.teardown()` to cause all of them to be removed from DOM, so that
 * the document is in the state it was before calling `impress().init()`.
 *
 * In addition to just adding elements and event listeners to the garbage collector, plugins
 * can also register callback functions to do arbitrary cleanup upon teardown.
 *
 * Henrik Ingo (c) 2016
 * MIT License
 */ /**
 * Common utility functions
 *
 * Copyright 2011-2012 Bartek Szopka (@bartaz)
 * Henrik Ingo (c) 2016
 * MIT License
 */ /**
 * Autoplay plugin - Automatically advance slideshow after N seconds
 *
 * Copyright 2016 Henrik Ingo, henrik.ingo@avoinelama.fi
 * Released under the MIT license.
 */ /* global clearTimeout, setTimeout, document */ /**
 * Blackout plugin
 *
 * Press Ctrl+b to hide all slides, and Ctrl+b again to show them.
 * Also navigating to a different slide will show them again (impress:stepleave).
 *
 * Copyright 2014 @Strikeskids
 * Released under the MIT license.
 */ /* global document */ /**
 * Extras Plugin
 *
 * This plugin performs initialization (like calling mermaid.initialize())
 * for the extras/ plugins if they are loaded into a presentation.
 *
 * See README.md for details.
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global markdown, hljs, mermaid, impress, document, window */ /**
 * Form support
 *
 * Functionality to better support use of input, textarea, button... elements in a presentation.
 *
 * This plugin does two things:
 *
 * Set stopPropagation on any element that might take text input. This allows users to type, for
 * example, the letter 'P' into a form field, without causing the presenter console to spring up.
 *
 * On impress:stepleave, de-focus any potentially active
 * element. This is to prevent the focus from being left in a form element that is no longer visible
 * in the window, and user therefore typing garbage into the form.
 *
 * TODO: Currently it is not possible to use TAB to navigate between form elements. Impress.js, and
 * in particular the navigation plugin, unfortunately must fully take control of the tab key,
 * otherwise a user could cause the browser to scroll to a link or button that's not on the current
 * step. However, it could be possible to allow tab navigation between form elements, as long as
 * they are on the active step. This is a topic for further study.
 *
 * Copyright 2016 Henrik Ingo
 * MIT License
 */ /* global document */ /**
 * Goto Plugin
 *
 * The goto plugin is a pre-stepleave plugin. It is executed before impress:stepleave,
 * and will alter the destination where to transition next.
 *
 * Example:
 *
 *         <!-- When leaving this step, go directly to "step-5" -->
 *         <div class="step" data-goto="step-5">
 *
 *         <!-- When leaving this step with next(), go directly to "step-5", instead of next step.
 *              If moving backwards to previous step - e.g. prev() instead of next() -
 *              then go to "step-1". -->
 *         <div class="step" data-goto-next="step-5" data-goto-prev="step-1">
 *
 *        <!-- data-goto-key-list and data-goto-next-list allow you to build advanced non-linear
 *             navigation. -->
 *        <div class="step"
 *             data-goto-key-list="ArrowUp ArrowDown ArrowRight ArrowLeft"
 *             data-goto-next-list="step-4 step-3 step-2 step-5">
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for a table
 * of what strings to use for each key.
 *
 * Copyright 2016-2017 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global window, document, impress */ /**
 * Help popup plugin
 *
 * Example:
 *
 *     <!-- Show a help popup at start, or if user presses "H" -->
 *     <div id="impress-help"></div>
 *
 * For developers:
 *
 * Typical use for this plugin, is for plugins that support some keypress, to add a line
 * to the help popup produced by this plugin. For example "P: Presenter console".
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global window, document */ /**
 * Adds a presenter console to impress.js
 *
 * MIT Licensed, see license.txt.
 *
 * Copyright 2012, 2013, 2015 impress-console contributors (see README.txt)
 *
 * version: 1.3-dev
 *
 */ // This file contains so much HTML, that we will just respectfully disagree about js
/* jshint quotmark:single */ /* global navigator, top, setInterval, clearInterval, document, window */ /**
 * Mobile devices support
 *
 * Allow presentation creators to hide all but 3 slides, to save resources, particularly on mobile
 * devices, using classes body.impress-mobile, .step.prev, .step.active and .step.next.
 *
 * Note: This plugin does not take into account possible redirections done with skip, goto etc
 * plugins. Basically it wouldn't work as intended in such cases, but the active step will at least
 * be correct.
 *
 * Adapted to a plugin from a submission by @Kzeni:
 * https://github.com/impress/impress.js/issues/333
 */ /* global document, navigator */ /**
 * Mouse timeout plugin
 *
 * After 3 seconds of mouse inactivity, add the css class
 * `body.impress-mouse-timeout`. On `mousemove`, `click` or `touch`, remove the
 * class.
 *
 * The use case for this plugin is to use CSS to hide elements from the screen
 * and only make them visible when the mouse is moved. Examples where this
 * might be used are: the toolbar from the toolbar plugin, and the mouse cursor
 * itself.
 *
 * Example CSS:
 *
 *     body.impress-mouse-timeout {
 *         cursor: none;
 *     }
 *     body.impress-mouse-timeout div#impress-toolbar {
 *         display: none;
 *     }
 *
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global window, document */ /**
 * Navigation UI plugin
 *
 * This plugin provides UI elements "back", "forward" and a list to select
 * a specific slide number.
 *
 * The navigation controls are added to the toolbar plugin via DOM events. User must enable the
 * toolbar in a presentation to have them visible.
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ // This file contains so much HTML, that we will just respectfully disagree about js
/* jshint quotmark:single */ /* global document */ /**
 * Navigation events plugin
 *
 * As you can see this part is separate from the impress.js core code.
 * It's because these navigation actions only need what impress.js provides with
 * its simple API.
 *
 * This plugin is what we call an _init plugin_. It's a simple kind of
 * impress.js plugin. When loaded, it starts listening to the `impress:init`
 * event. That event listener initializes the plugin functionality - in this
 * case we listen to some keypress and mouse events. The only dependencies on
 * core impress.js functionality is the `impress:init` method, as well as using
 * the public api `next(), prev(),` etc when keys are pressed.
 *
 * Copyright 2011-2012 Bartek Szopka (@bartaz)
 * Released under the MIT license.
 * ------------------------------------------------
 *  author:  Bartek Szopka
 *  version: 0.5.3
 *  url:     http://bartaz.github.com/impress.js/
 *  source:  http://github.com/bartaz/impress.js/
 *
 */ /* global document */ /* global document */ /**
 * Relative Positioning Plugin
 *
 * This plugin provides support for defining the coordinates of a step relative
 * to the previous step. This is often more convenient when creating presentations,
 * since as you add, remove or move steps, you may not need to edit the positions
 * as much as is the case with the absolute coordinates supported by impress.js
 * core.
 *
 * Example:
 *
 *         <!-- Position step 1000 px to the right and 500 px up from the previous step. -->
 *         <div class="step" data-rel-x="1000" data-rel-y="500">
 *
 * Following html attributes are supported for step elements:
 *
 *     data-rel-x
 *     data-rel-y
 *     data-rel-z
 *
 * These values are also inherited from the previous step. This makes it easy to
 * create a boring presentation where each slide shifts for example 1000px down
 * from the previous.
 *
 * In addition to plain numbers, which are pixel values, it is also possible to
 * define relative positions as a multiple of screen height and width, using
 * a unit of "h" and "w", respectively, appended to the number.
 *
 * Example:
 *
 *        <div class="step" data-rel-x="1.5w" data-rel-y="1.5h">
 *
 * This plugin is a *pre-init plugin*. It is called synchronously from impress.js
 * core at the beginning of `impress().init()`. This allows it to process its own
 * data attributes first, and possibly alter the data-x, data-y and data-z attributes
 * that will then be processed by `impress().init()`.
 *
 * (Another name for this kind of plugin might be called a *filter plugin*, but
 * *pre-init plugin* is more generic, as a plugin might do whatever it wants in
 * the pre-init stage.)
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global document, window */ /**
 * Resize plugin
 *
 * Rescale the presentation after a window resize.
 *
 * Copyright 2011-2012 Bartek Szopka (@bartaz)
 * Released under the MIT license.
 * ------------------------------------------------
 *  author:  Bartek Szopka
 *  version: 0.5.3
 *  url:     http://bartaz.github.com/impress.js/
 *  source:  http://github.com/bartaz/impress.js/
 *
 */ /* global document, window */ /**
 * Skip Plugin
 *
 * Example:
 *
 *    <!-- This slide is disabled in presentations, when moving with next()
 *         and prev() commands, but you can still move directly to it, for
 *         example with a url (anything using goto()). -->
 *         <div class="step skip">
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global document, window */ /**
 * Stop Plugin
 *
 * Example:
 *
 *        <!-- Stop at this slide.
 *             (For example, when used on the last slide, this prevents the
 *             presentation from wrapping back to the beginning.) -->
 *        <div class="step stop">
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global document, window */ /**
 * Substep Plugin
 *
 * Copyright 2017 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global document, window */ /**
 * Toolbar plugin
 *
 * This plugin provides a generic graphical toolbar. Other plugins that
 * want to expose a button or other widget, can add those to this toolbar.
 *
 * Using a single consolidated toolbar for all GUI widgets makes it easier
 * to position and style the toolbar rather than having to do that for lots
 * of different divs.
 *
 *
 * *** For presentation authors: *****************************************
 *
 * To add/activate the toolbar in your presentation, add this div:
 *
 *     <div id="impress-toolbar"></div>
 *
 * Styling the toolbar is left to presentation author. Here's an example CSS:
 *
 *    .impress-enabled div#impress-toolbar {
 *        position: fixed;
 *        right: 1px;
 *        bottom: 1px;
 *        opacity: 0.6;
 *    }
 *    .impress-enabled div#impress-toolbar > span {
 *        margin-right: 10px;
 *    }
 *
 * The [mouse-timeout](../mouse-timeout/README.md) plugin can be leveraged to hide
 * the toolbar from sight, and only make it visible when mouse is moved.
 *
 *    body.impress-mouse-timeout div#impress-toolbar {
 *        display: none;
 *    }
 *
 *
 * *** For plugin authors **********************************************
 *
 * To add a button to the toolbar, trigger the `impress:toolbar:appendChild`
 * or `impress:toolbar:insertBefore` events as appropriate. The detail object
 * should contain following parameters:
 *
 *    { group : 1,                       // integer. Widgets with the same group are grouped inside
 *                                       // the same <span> element.
 *      html : "<button>Click</button>", // The html to add.
 *      callback : "mycallback",         // Toolbar plugin will trigger event
 *                                       // `impress:toolbar:added:mycallback` when done.
 *      before: element }                // The reference element for an insertBefore() call.
 *
 * You should also listen to the `impress:toolbar:added:mycallback` event. At
 * this point you can find the new widget in the DOM, and for example add an
 * event listener to it.
 *
 * You are free to use any integer for the group. It's ok to leave gaps. It's
 * ok to co-locate with widgets for another plugin, if you think they belong
 * together.
 *
 * See navigation-ui for an example.
 *
 * Copyright 2016 Henrik Ingo (@henrikingo)
 * Released under the MIT license.
 */ /* global document */ /**
 * Support for swipe and tap on touch devices
 *
 * This plugin implements navigation for plugin devices, via swiping left/right,
 * or tapping on the left/right edges of the screen.
 *
 *
 *
 * Copyright 2015: Andrew Dunai (@and3rson)
 * Modified to a plugin, 2016: Henrik Ingo (@henrikingo)
 *
 * MIT License
 */ /* global document, window */ /**
 * impress.js addclass addon
 *
 * This addon adds a requested class to the body on slide change.
 */ /**
 * impress.js func addon
 *
 * This addon allows you specify a function to be called when you enter a step
 * as well as when you leave. You can specify these functions as dotted strings
 * like so:
 *
 *     <div class="step" data-func-enter="myLibrary.utils.setup"
 *             data-func-leave="myLibrary.utils.teardown" ...>
 *         ...
 *     </div>
 *
 * These functions receive the entire impress event as their sole argument.
 * From there, you will be able to access the step node to do whatever you
 * want.
 *
 * The original use-case for this was for a presentation that utilized data
 * visualizations built using d3. In order to prevent having to build all of
 * the visualizations on page load, possibly causing delays or intense memory
 * usage from so many nodes being added to the dom, the goal was to have the
 * visualization built when the step was entered, then garbage collected when
 * the step was left. To make sure that an overview of the presentation (á là
 * https://impress.js.org/#/overview ) didn't jus thave blank spots where the
 * visualizations were, a placeholder image was included. The result looked
 * looked something like:
 *
 *     function stepEnter(evt) {
 *       const node = d3.select(evt.target);
 *       node.select('.placeholder')
 *         .style('display', 'none');
 *       // set up visualization here...
 *     }
 *
 *     function stepLeave(evt) {
 *       const node = d3.select(evt.target);
 *       node.select('.placeholder')
 *         .style('display', 'block');
 *       // tear down visualization here...
 *     }
 *
 * Sure, I could have just included those images in my presentation and be
 * done with it, but that would mean losing the interactive or animated nature
 * of them, and that's no fun!
 */(function(e,t){"use strict";var s,i=Math.abs,n=function(){var t=e.createElement("dummy").style,s=["Webkit","Moz","O","ms","Khtml"],n={};return function(e){if("undefined"==typeof n[e]){var r=e.charAt(0).toUpperCase()+e.substr(1),a=(e+" "+s.join(r+" ")+r).split(" ");for(var o in n[e]=null,a)if(void 0!==t[a[o]]){n[e]=a[o];break}}return n[e]}}(),r=function(e,t){var s="xyz",n="";if("string"==typeof e)for(var r in e.split(""))0<=s.indexOf(e[r])&&(// Each of x,y,z can be used only once.
n+=e[r],s=s.split(e[r]).join(""));return n?n:void 0===t?"xyz":t},a=function(e,t){var i,s;for(i in t)t.hasOwnProperty(i)&&(s=n(i),null!==s&&(e.style[s]=t[i]));return e},o=function(e){return" translate3d("+e.x+"px,"+e.y+"px,"+e.z+"px) "},l=function(e,t){var s=e.order?e.order:"xyz",n="",r=s.split("");t&&(r=r.reverse());for(var a=0;a<r.length;a++)n+=" rotate"+r[a].toUpperCase()+"("+e[r[a]]+"deg)";return n},d=function(e){return" scale("+e+") "},p=function(e){var i=t.innerHeight/e.height,s=t.innerWidth/e.width,n=i>s?s:i;return e.maxScale&&n>e.maxScale&&(n=e.maxScale),e.minScale&&n<e.minScale&&(n=e.minScale),n},m=e.body,c=// Browser should support CSS 3D transtorms
null!==n("perspective")&&// And `classList` and `dataset` APIs
m.classList&&m.dataset;c||(m.className+=" impress-not-supported ");// GLOBALS AND DEFAULTS
// This is where the root elements of all impress.js instances will be kept.
// Yes, this means you can have more than one instance on a page, but I'm not
// sure if it makes any sense in practice ;)
var u={},g=[],v=[],y={width:1024,height:768,maxScale:1,minScale:0,perspective:1e3,transitionDuration:1e3},h=function(){return!1},b=t.impress=function(n){// If impress.js is not supported by the browser return a dummy API
// it may not be a perfect solution but we return early and avoid
// running code that may use features not implemented in the browser.
if(!c)return{init:h,goto:h,prev:h,next:h,swipe:h,tear:h,lib:{}};// If given root is already initialized just return the API
if(n=n||"impress",u["impress-root-"+n])return u["impress-root-"+n];// The gc library depends on being initialized before we do any changes to DOM.
s=L(n),m.classList.remove("impress-not-supported"),m.classList.add("impress-supported");// Data of all presentation steps
var g={},v=null,b=null,E=null,w=null,C=null,S=s.util.byId(n),I=e.createElement("div"),D=!1,N=null,z=function(e){N!==e&&(s.util.triggerEvent(e,"impress:stepenter"),N=e),s.util.triggerEvent(e,"impress:steprefresh")},T=function(e,t){N===e&&(s.util.triggerEvent(e,"impress:stepleave",{next:t}),N=null)},A=function(e,t){var i=e.dataset,n={translate:{x:s.util.toNumber(i.x),y:s.util.toNumber(i.y),z:s.util.toNumber(i.z)},rotate:{x:s.util.toNumber(i.rotateX),y:s.util.toNumber(i.rotateY),z:s.util.toNumber(i.rotateZ||i.rotate),order:r(i.rotateOrder)},scale:s.util.toNumber(i.scale,1),transitionDuration:s.util.toNumber(i.transitionDuration,w.transitionDuration),el:e};e.id||(e.id="step-"+(t+1)),g["impress-"+e.id]=n,a(e,{position:"absolute",transform:"translate(-50%,-50%)"+o(n.translate)+l(n.rotate)+d(n.scale),transformStyle:"preserve-3d"})},B=function(){E=s.util.$$(".step",S),E.forEach(A)},H=function(){if(!D){x(S);// First we set up the viewport for mobile devices.
// For some reason iPad goes nuts when it is not done properly.
var t=s.util.$("meta[name='viewport']")||e.createElement("meta");t.content="width=device-width, minimum-scale=1, maximum-scale=1, user-scalable=no",t.parentNode!==e.head&&(t.name="viewport",e.head.appendChild(t));// Initialize configuration object
var i=S.dataset;w={width:s.util.toNumber(i.width,y.width),height:s.util.toNumber(i.height,y.height),maxScale:s.util.toNumber(i.maxScale,y.maxScale),minScale:s.util.toNumber(i.minScale,y.minScale),perspective:s.util.toNumber(i.perspective,y.perspective),transitionDuration:s.util.toNumber(i.transitionDuration,y.transitionDuration)},C=p(w),s.util.arrayify(S.childNodes).forEach(function(e){I.appendChild(e)}),S.appendChild(I),e.documentElement.style.height="100%",a(m,{height:"100%",overflow:"hidden"});var r={position:"absolute",transformOrigin:"top left",transition:"all 0s ease-in-out",transformStyle:"preserve-3d"};a(S,r),a(S,{top:"50%",left:"50%",perspective:w.perspective/C+"px",transform:d(C)}),a(I,r),m.classList.remove("impress-disabled"),m.classList.add("impress-enabled"),B(),b={translate:{x:0,y:0,z:0},rotate:{x:0,y:0,z:0,order:"xyz"},scale:1},D=!0,s.util.triggerEvent(S,"impress:init",{api:u["impress-root-"+n]})}},P=function(e){return"number"==typeof e?e=0>e?E[E.length+e]:E[e]:"string"==typeof e&&(e=s.util.byId(e)),e&&e.id&&g["impress-"+e.id]?e:null},M=null,q=function(e,i,n,r){if(n=n||"goto",r=r||null,!D)return!1;// Re-execute initAllSteps for each transition. This allows to edit step attributes
// dynamically, such as change their coordinates, or even remove or add steps, and have
// that change apply when goto() is called.
if(B(),!(e=P(e)))return!1;// Sometimes it's possible to trigger focus on first link with some keyboard action.
// Browser in such a case tries to scroll the page to make this element visible
// (even that body overflow is set to hidden) and it breaks our careful positioning.
//
// So, as a lousy (and lazy) workaround we will make the page scroll back to the top
// whenever slide is selected
//
// If you are reading this and know any better way to handle it, I'll be glad to hear
// about it!
t.scrollTo(0,0);var c=g["impress-"+e.id];// If we are in fact moving to another step, start with executing the registered
// preStepLeave plugins.
if(i=void 0===i?c.transitionDuration:i,v&&v!==e){var u={target:v,detail:{}};if(u.detail.next=e,u.detail.transitionDuration=i,u.detail.reason=n,r&&(u.origEvent=r),!1===f(u))// PreStepLeave plugins are allowed to abort the transition altogether, by
// returning false.
// see stop and substep plugins for an example of doing just that
return!1;// Plugins are allowed to change the detail values
e=u.detail.next,c=g["impress-"+e.id],i=u.detail.transitionDuration}v&&(v.classList.remove("active"),m.classList.remove("impress-on-"+v.id)),e.classList.add("active"),m.classList.add("impress-on-"+e.id);// Compute target state of the canvas based on given step
var y={rotate:{x:-c.rotate.x,y:-c.rotate.y,z:-c.rotate.z,order:c.rotate.order},translate:{x:-c.translate.x,y:-c.translate.y,z:-c.translate.z},scale:1/c.scale},h=y.scale>=b.scale;// Check if the transition is zooming in or not.
//
// This information is used to alter the transition style:
// when we are zooming in - we start with move and rotate transition
// and the scaling is delayed, but when we are zooming out we start
// with scaling down and move and rotation are delayed.
i=s.util.toNumber(i,w.transitionDuration);var E=i/2;// If the same step is re-selected, force computing window scaling,
// because it is likely to be caused by window resize
e===v&&(C=p(w));var L=y.scale*C;// Trigger leave of currently active element (if it's not the same step again)
return v&&v!==e&&T(v,e),a(S,{// To keep the perspective look similar for different scales
// we need to "scale" the perspective, too
// For IE 11 support we must specify perspective independent
// of transform.
perspective:w.perspective/L+"px",transform:d(L),transitionDuration:i+"ms",transitionDelay:(h?E:0)+"ms"}),a(I,{transform:l(y.rotate,!0)+o(y.translate),transitionDuration:i+"ms",transitionDelay:(h?0:E)+"ms"}),(b.scale===y.scale||b.rotate.x===y.rotate.x&&b.rotate.y===y.rotate.y&&b.rotate.z===y.rotate.z&&b.translate.x===y.translate.x&&b.translate.y===y.translate.y&&b.translate.z===y.translate.z)&&(E=0),b=y,v=e,t.clearTimeout(M),M=t.setTimeout(function(){z(v)},i+E),e},O=function(e){var t=E.indexOf(v)-1;return t=0<=t?E[t]:E[E.length-1],q(t,void 0,"prev",e)},K=function(e){var t=E.indexOf(v)+1;return t=t<E.length?E[t]:E[0],q(t,void 0,"next",e)},W=function(e,t,i){return e+(t-e)*i},V=function(e){if(!(1<i(e))){// Prepare & execute the preStepLeave event
var t={target:v,detail:{}};t.detail.swipe=e,t.detail.transitionDuration=w.transitionDuration;var s;// Needed by jshint
if(0>e)s=E.indexOf(v)+1,t.detail.next=s<E.length?E[s]:E[0],t.detail.reason="next";else if(0<e)s=E.indexOf(v)-1,t.detail.next=0<=s?E[s]:E[E.length-1],t.detail.reason="prev";else// No move
return;if(!1===f(t))// If a preStepLeave plugin wants to abort the transition, don't animate a swipe
// For stop, this is probably ok. For substep, the plugin it self might want to do
// some animation, but that's not the current implementation.
return!1;var n=t.detail.next,r=g["impress-"+n.id],p=r.scale*C,m=i(e),c={translate:{x:W(b.translate.x,-r.translate.x,m),y:W(b.translate.y,-r.translate.y,m),z:W(b.translate.z,-r.translate.z,m)},rotate:{x:W(b.rotate.x,-r.rotate.x,m),y:W(b.rotate.y,-r.rotate.y,m),z:W(b.rotate.z,-r.rotate.z,m),// Unfortunately there's a discontinuity if rotation order changes. Nothing I
// can do about it?
order:.7>m?b.rotate.order:r.rotate.order},scale:W(b.scale,p,m)};a(S,{// To keep the perspective look similar for different scales
// we need to 'scale' the perspective, too
perspective:w.perspective/c.scale+"px",transform:d(c.scale),transitionDuration:"0ms",transitionDelay:"0ms"}),a(I,{transform:l(c.rotate,!0)+o(c.translate),transitionDuration:"0ms",transitionDelay:"0ms"})}},j=function(){s.gc.teardown(),delete u["impress-root-"+n]};// Element of currently active step
// Store and return API for given impress.js root element
return s.gc.addEventListener(S,"impress:init",function(){E.forEach(function(e){e.classList.add("future")}),s.gc.addEventListener(S,"impress:stepenter",function(e){e.target.classList.remove("past"),e.target.classList.remove("future"),e.target.classList.add("present")},!1),s.gc.addEventListener(S,"impress:stepleave",function(e){e.target.classList.remove("present"),e.target.classList.add("past")},!1)},!1),s.gc.addEventListener(S,"impress:init",function(){// Last hash detected
var e="";// `#/step-id` is used instead of `#step-id` to prevent default browser
// scrolling to element in hash.
//
// And it has to be set after animation finishes, because in Chrome it
// makes transtion laggy.
// BUG: http://code.google.com/p/chromium/issues/detail?id=62820
s.gc.addEventListener(S,"impress:stepenter",function(i){t.location.hash=e="#/"+i.target.id},!1),s.gc.addEventListener(t,"hashchange",function(){t.location.hash!==e&&q(s.util.getElementFromHash())},!1),q(s.util.getElementFromHash()||E[0],0)},!1),m.classList.add("impress-disabled"),u["impress-root-"+n]={init:H,goto:q,next:K,prev:O,swipe:V,tear:j,lib:s}};b.supported=c;// ADD and INIT LIBRARIES
// Library factories are defined in src/lib/*.js, and register themselves by calling
// impress.addLibraryFactory(libraryFactoryObject). They're stored here, and used to augment
// the API with library functions when client calls impress(rootId).
// See src/lib/README.md for clearer example.
// (Advanced usage: For different values of rootId, a different instance of the libaries are
// generated, in case they need to hold different state for different root elements.)
var E={};b.addLibraryFactory=function(e){for(var t in e)e.hasOwnProperty(t)&&(E[t]=e[t])};// Call each library factory, and return the lib object that is added to the api.
var L=function(e){//jshint ignore:line
var t={};for(var i in E)if(E.hasOwnProperty(i)){if(t[i]!==void 0)throw"impress.js ERROR: Two libraries both tried to use libname: "+i;t[i]=E[i](e)}return t};// `addPreInitPlugin` allows plugins to register a function that should
// be run (synchronously) at the beginning of init, before
// impress().init() itself executes.
b.addPreInitPlugin=function(e,t){if(t=parseInt(t)||10,0>=t)throw"addPreInitPlugin: weight must be a positive integer";void 0===g[t]&&(g[t]=[]),g[t].push(e)};// Called at beginning of init, to execute all pre-init plugins.
var x=function(e){//jshint ignore:line
for(var t,s=0;s<g.length;s++)if(t=g[s],void 0!==t)for(var n=0;n<t.length;n++)t[n](e)};// `addPreStepLeavePlugin` allows plugins to register a function that should
// be run (synchronously) at the beginning of goto()
b.addPreStepLeavePlugin=function(e,t){if(t=parseInt(t)||10,0>=t)throw"addPreStepLeavePlugin: weight must be a positive integer";void 0===v[t]&&(v[t]=[]),v[t].push(e)};// Called at beginning of goto(), to execute all preStepLeave plugins.
var f=function(e){//jshint ignore:line
for(var t,s=0;s<v.length;s++)if(t=v[s],void 0!==t)for(var n=0;n<t.length;n++)if(!1===t[n](e))// If a plugin returns false, the stepleave event (and related transition)
// is aborted
return!1}})(document,window),function(e,t){"use strict";var s=[],n=0,r={roots:[]},a=function(e){if(s[e])return s[e];// Per root global variables (instance variables?)
var t=[],r=[],a=[];o(e);// LIBRARY FUNCTIONS
// Definitions of the library functions we return as an object at the end
// `pushElement` adds a DOM element to the gc stack
var d=function(e){t.push(e)},p=function(e,t,i){r.push({target:e,type:t,listener:i})},m=function(e){a.push(e)};// `appendChild` is a convenience wrapper that combines DOM appendChild with gc.pushElement
m(function(e){l(e)});// `teardown` will
// - execute all callbacks in LIFO order
// - call `removeChild` on all DOM elements in LIFO order
// - call `removeEventListener` on all event listeners in LIFO order
// The goal of a teardown is to return to the same state that the DOM was before
// `impress().init()` was called.
var c=function(){// Execute the callbacks in LIFO order
var s;// Needed by jshint
for(s=a.length-1;0<=s;s--)a[s](e);for(a=[],s=0;s<t.length;s++)t[s].parentElement.removeChild(t[s]);for(t=[],s=0;s<r.length;s++){var n=r[s].target,o=r[s].type,l=r[s].listener;n.removeEventListener(o,l)}},u={pushElement:d,appendChild:function(e,t){e.appendChild(t),d(t)},pushEventListener:p,addEventListener:function(e,t,i){e.addEventListener(t,i),p(e,t,i)},pushCallback:m,teardown:c};return s[e]=u,n++,u};t.impress.addLibraryFactory({gc:a});// CORE INIT
// The library factory (gc(rootId)) is called at the beginning of impress(rootId).init()
// For the purposes of teardown(), we can use this as an opportunity to save the state
// of a few things in the DOM in their virgin state, before impress().init() did anything.
// Note: These could also be recorded by the code in impress.js core as these values
// are changed, but in an effort to not deviate too much from upstream, I'm adding
// them here rather than the core itself.
var o=function(t){r.roots[t]={},r.roots[t].steps=[];for(var s,a=e.getElementById(t).querySelectorAll(".step"),o=0;o<a.length;o++)s=a[o],r.roots[t].steps.push({el:s,id:s.getAttribute("id")});// In the rare case of multiple roots, the following is changed on first init() and
// reset at last tear().
if(0===n){r.body={},r.body.impressNotSupported=!!e.body.classList.contains("impress-not-supported");// If there's a <meta name="viewport"> element, its contents will be overwritten by init
var l=e.head.querySelectorAll("meta");for(o=0;o<l.length;o++){var d=l[o];"viewport"===d.name&&(r.meta=d.content)}}},l=function(t){e.body.classList.remove("impress-enabled"),e.body.classList.remove("impress-disabled");var a=e.getElementById(t),o=a.querySelector(".active").id;e.body.classList.remove("impress-on-"+o),e.documentElement.style.height="",e.body.style.height="",e.body.style.overflow="";for(var l=a.querySelectorAll(".step"),d=0;d<l.length;d++)l[d].classList.remove("future"),l[d].classList.remove("past"),l[d].classList.remove("present"),l[d].classList.remove("active"),l[d].style.position="",l[d].style.transform="",l[d].style["transform-style"]="";a.style.position="",a.style["transform-origin"]="",a.style.transition="",a.style["transform-style"]="",a.style.top="",a.style.left="",a.style.transform="",l=r.roots[t].steps;for(var p;p=l.pop();)null===p.id?p.el.removeAttribute("id"):p.el.setAttribute("id",p.id);delete r.roots[t];// Move step div elements away from canvas, then delete canvas
// Note: There's an implicit assumption here that the canvas div is the only child element
// of the root div. If there would be something else, it's gonna be lost.
var c=a.firstChild,u=c.innerHTML;if(a.innerHTML=u,void 0!==s[t]&&(delete s[t],n--),0===n){e.body.classList.remove("impress-supported"),r.body.impressNotSupported&&e.body.classList.add("impress-not-supported");// We need to remove or reset the meta element inserted by impress.js
var g=e.head.querySelectorAll("meta");for(d=0;d<g.length;d++){var v=g[d];"viewport"===v.name&&(void 0===r.meta?v.parentElement.removeChild(v):v.content=r.meta)}}};// CORE TEARDOWN
}(document,window),function(e,t){"use strict";var i=[];// Let impress core know about the existence of this library
t.impress.addLibraryFactory({util:function(s){if(i[s])return i[s];// `$` returns first element for given CSS `selector` in the `context` of
// the given element or whole document.
var n=function(e){return[].slice.call(e)},r=function(t){return e.getElementById(t)},a={$:function(t,i){return i=i||e,i.querySelector(t)},$$:function(t,i){return i=i||e,n(i.querySelectorAll(t))},arrayify:n,byId:r,getElementFromHash:function(){// Get id from url # by removing `#` or `#/` from the beginning,
// so both "fallback" `#slide-id` and "enhanced" `#/slide-id` will work
return r(t.location.hash.replace(/^#\/?/,""))},throttle:function(e,i){var s=null;return function(){var n=this,r=arguments;t.clearTimeout(s),s=t.setTimeout(function(){e.apply(n,r)},i)}},toNumber:function(e,t){return isNaN(e)?t||0:+e},triggerEvent:function(t,i,s){var n=e.createEvent("CustomEvent");n.initCustomEvent(i,!0,!0,s),t.dispatchEvent(n)}};// `$$` return an array of elements for given CSS `selector` in the `context` of
// the given element or whole document.
return i[s]=a,a}})}(document,window),function(e){"use strict";var t,i=0,s=0,n=null,r=null,a=null;e.addEventListener("impress:init",function(s){t=s.detail.api.lib.util,n=s.detail.api,a=s.target;// Element attributes starting with "data-", become available under
// element.dataset. In addition hyphenized words become camelCased.
var o=a.dataset;o.autoplay&&(i=t.toNumber(o.autoplay,0));var l=e.querySelector("#impress-toolbar");l&&y(l),n.lib.gc.pushCallback(function(){clearTimeout(r)})},!1);// If default autoplay time was defined in the presentation root, or
// in this step, set timeout.
var o=function(e){var n=e.target;s=t.toNumber(n.dataset.autoplay,i),"paused"===d?l(0):l(s)};e.addEventListener("impress:stepenter",function(e){o(e)},!1),e.addEventListener("impress:substep:stepleaveaborted",function(e){o(e)},!1);/**
     * Set timeout after which we move to next() step.
     */var l=function(e){r&&clearTimeout(r),0<e&&(r=setTimeout(function(){n.next()},1e3*e)),v()},d="not clicked",p=null,m=function(t,i,s){var n=e.createEvent("CustomEvent");n.initCustomEvent(i,!0,!0,s),t.dispatchEvent(n)},c=function(t){var i=e.createElement("div");return i.innerHTML=t,i.firstChild},u=function(){d=0<s&&"paused"!==d?"paused":"playing"},g=function(){return 0<s&&"paused"!==d?"||":"&#9654;"},v=function(){if(p){// Keep button size the same even if label content is changing
var e=p.offsetWidth,t=p.offsetHeight;p.innerHTML=g(),p.style.width||(p.style.width=e+"px"),p.style.height||(p.style.height=t+"px")}},y=function(e){var t="<button id=\"impress-autoplay-playpause\" title=\"Autoplay\" class=\"impress-autoplay\">"+// jshint ignore:line
g()+"</button>";// jshint ignore:line
p=c(t),p.addEventListener("click",function(){u(),"playing"===d?(0===i&&(i=7),0===s&&(s=i),l(s)):"paused"===d&&l(0)}),m(e,"impress:toolbar:appendChild",{group:10,element:p})};/*** Toolbar plugin integration *******************************************/}(document),function(e){"use strict";var t=null,i=!1,s=function(e,t){var i,s;for(i in t)t.hasOwnProperty(i)&&(s=n(i),null!==s&&(e.style[s]=t[i]));return e},n=function(){var t=e.createElement("dummy").style,s=["Webkit","Moz","O","ms","Khtml"],n={};return function(e){if("undefined"==typeof n[e]){var r=e.charAt(0).toUpperCase()+e.substr(1),a=(e+" "+s.join(r+" ")+r).split(" ");for(var o in n[e]=null,a)if(void 0!==t[a[o]]){n[e]=a[o];break}}return n[e]}}(),r=function(){i&&(s(t,{display:"block"}),i=!1)},a=function(){i?r():(s(t,{display:(i=!i)?"none":"block"}),i=!0)};// Wait for impress.js to be initialized
e.addEventListener("impress:init",function(s){var n=s.detail.api,o=s.target;t=o.firstElementChild;var l=n.lib.gc;l.addEventListener(e,"keydown",function(e){66===e.keyCode&&(e.preventDefault(),i?r():a())},!1),l.addEventListener(e,"keyup",function(e){66===e.keyCode&&e.preventDefault()},!1)},!1),e.addEventListener("impress:stepleave",function(){r()},!1)}(document),function(e,t){"use strict";// Register the plugin to be called in pre-init phase
// Note: Markdown.js should run early/first, because it creates new div elements.
// So add this with a lower-than-default weight.
impress.addPreInitPlugin(function(){if(t.markdown)// Unlike the other extras, Markdown.js doesn't by default do anything in
// particular. We do it ourselves here.
// In addition, we use "-----" as a delimiter for new slide.
// Query all .markdown elements and translate to HTML
for(var s=e.querySelectorAll(".markdown"),n=0;n<s.length;n++){var r=s[n],a=r.textContent.split(/^-----$/m),o=a.length-1;r.innerHTML=markdown.toHTML(a[o]);// If there's an id, unset it for last, and all other, elements,
// and then set it for the first.
var l=null;for(r.id&&(l=r.id,r.id=""),o--;0<=o;){var d=r.cloneNode(!1);d.innerHTML=markdown.toHTML(a[o]),r.parentNode.insertBefore(d,r),r=d,o--}null!==l&&(r.id=l)}// Markdown
t.hljs&&hljs.initHighlightingOnLoad(),t.mermaid&&mermaid.initialize({startOnLoad:!0})},1)}(document,window),function(t){"use strict";var s,n;t.addEventListener("impress:init",function(r){s=r.target,n=r.detail.api;var a=n.lib.gc,o=["input[type=text]","textarea","select","[contenteditable=true]"];for(var l of o){var d=t.querySelectorAll(l);if(d)for(var p,m=0;m<d.length;m++)p=d[m],a.addEventListener(p,"keydown",function(e){e.stopPropagation()}),a.addEventListener(p,"keyup",function(e){e.stopPropagation()})}},!1),t.addEventListener("impress:stepleave",function(){t.activeElement.blur()},!1)}(document),function(e,t){"use strict";var i;e.addEventListener("impress:init",function(e){i=e.detail.api.lib},!1);var s=function(e){return!isNaN(e)},n=function(n){if(n&&n.target){var r=n.target.dataset,a=e.querySelectorAll(".step");// Data-goto-key-list="" & data-goto-next-list="" //////////////////////////////////////////
if(void 0!==r.gotoKeyList&&void 0!==r.gotoNextList&&void 0!==n.origEvent&&void 0!==n.origEvent.key){var o=r.gotoKeyList.split(" "),l=r.gotoNextList.split(" ");if(o.length!==l.length)t.console.log("impress goto plugin: data-goto-key-list and data-goto-next-list don't match:"),t.console.log(o),t.console.log(l);else{var d=o.indexOf(n.origEvent.key);if(0<=d){var p=l[d];if(s(p))return n.detail.next=a[p],void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));var m=e.getElementById(p);if(m&&m.classList.contains("step"))return n.detail.next=m,void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));t.console.log("impress goto plugin: "+p+" is not a step in this impress presentation.")}}}// Data-goto-next="" & data-goto-prev="" ///////////////////////////////////////////////////
// Handle event.target data-goto-next attribute
if(s(r.gotoNext)&&"next"===n.detail.reason)return n.detail.next=a[r.gotoNext],void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));if(r.gotoNext&&"next"===n.detail.reason){var m=e.getElementById(r.gotoNext);// jshint ignore:line
if(m&&m.classList.contains("step"))return n.detail.next=m,void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));t.console.log("impress goto plugin: "+r.gotoNext+" is not a step in this impress presentation.")}// Handle event.target data-goto-prev attribute
if(s(r.gotoPrev)&&"prev"===n.detail.reason)return n.detail.next=a[r.gotoPrev],void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));if(r.gotoPrev&&"prev"===n.detail.reason){var m=e.getElementById(r.gotoPrev);// jshint ignore:line
if(m&&m.classList.contains("step"))return n.detail.next=m,void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));t.console.log("impress goto plugin: "+r.gotoPrev+" is not a step in this impress presentation.")}// Data-goto="" ///////////////////////////////////////////////////////////////////////////
// Handle event.target data-goto attribute
if(s(r.goto))return n.detail.next=a[r.goto],void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));if(r.goto){var m=e.getElementById(r.goto);// jshint ignore:line
if(m&&m.classList.contains("step"))return n.detail.next=m,void(n.detail.transitionDuration=i.util.toNumber(n.detail.next.dataset.transitionDuration,n.detail.transitionDuration));t.console.log("impress goto plugin: "+r.goto+" is not a step in this impress presentation.")}}};// Register the plugin to be called in pre-stepleave phase
impress.addPreStepLeavePlugin(n)}(document,window),function(t,i){"use strict";var s,n=[],r=function(e,i,s){var n=t.createEvent("CustomEvent");n.initCustomEvent(i,!0,!0,s),e.dispatchEvent(n)},a=function(){var e=t.getElementById("impress-help");if(e){var i=[];for(var s in n)for(var r in s)i.push(n[s][r]);e.innerHTML="<table>\n"+i.join("\n")+"</table>\n"}},o=function(){var e=t.getElementById("impress-help");e&&("block"===e.style.display?e.style.display="none":(e.style.display="block",i.clearTimeout(s)))};// API
// Other plugins can add help texts, typically if they support an action on a keypress.
/**
     * Add a help text to the help popup.
     *
     * :param: e.detail.command  Example: "H"
     * :param: e.detail.text     Example: "Show this help."
     * :param: e.detail.row      Row index from 0 to 9 where to place this help text. Example: 0
     */t.addEventListener("keyup",function(e){72===e.keyCode&&(e.preventDefault(),o())},!1),t.addEventListener("impress:help:add",function(t){// The idea is for the sender of the event to supply a unique row index, used for sorting.
// But just in case two plugins would ever use the same row index, we wrap each row into
// its own array. If there are more than one entry for the same index, they are shown in
// first come, first serve ordering.
var e=t.detail.row;"object"==typeof n[e]&&n[e].isArray||(n[e]=[]),n[t.detail.row].push("<tr><td><strong>"+t.detail.command+"</strong></td><td>"+t.detail.text+"</td></tr>"),a()}),t.addEventListener("impress:init",function(o){a();// At start, show the help for 7 seconds.
var e=t.getElementById("impress-help");if(e){e.style.display="block",s=i.setTimeout(function(){var e=t.getElementById("impress-help");e.style.display="none"},7e3);// Regster callback to empty the help div on teardown
var l=o.detail.api;l.lib.gc.pushCallback(function(){i.clearTimeout(s),e.style.display="",e.innerHTML="",n=[]})}// Use our own API to register the help text for "h"
r(t,"impress:help:add",{command:"H",text:"Show this help",row:0})})}(document,window),function(e,t){"use strict";// TODO: Move this to src/lib/util.js
var i,s=function(t,i,s){var n=e.createEvent("CustomEvent");n.initCustomEvent(i,!0,!0,s),t.dispatchEvent(n)};// Create Language object depending on browsers language setting
switch(navigator.language){case"de":i={noNotes:"<div class=\"noNotes\">Keine Notizen hierzu</div>",restart:"Neustart",clickToOpen:"Klicken um Sprecherkonsole zu \xF6ffnen",prev:"zur\xFCck",next:"weiter",loading:"initalisiere",ready:"Bereit",moving:"in Bewegung",useAMPM:!1};break;case"en":// jshint ignore:line
default:i={noNotes:"<div class=\"noNotes\">No notes for this step</div>",restart:"Restart",clickToOpen:"Click to open speaker console",prev:"Prev",next:"Next",loading:"Loading",ready:"Ready",moving:"Moving",useAMPM:!1};}// Settings to set iframe in speaker console
const n=.7,r=.5,a=4;// Default css location
var o=void 0,l=void 0,d={},p=function(e){return(10>e?"0":"")+e},m=t.impressConsole=function(s){var m=Math.floor;if(s=s||"impress",d[s])return d[s];// Root presentation elements
var u=e.getElementById(s),g=null,v=function(){// Return to parents as long as there is no next sibling
for(var t="",s=e.querySelector(".active");!s.nextElementSibling&&s.parentNode;)s=s.parentNode;for(s=s.nextElementSibling;s;){if(t=s.attributes["class"],t&&-1!==t.value.indexOf("step"))return g.document.getElementById("blocker").innerHTML=i.next,s;if(s.firstElementChild)s=s.firstElementChild;else{// Go to next sibling or through parents until there is a next sibling
for(;!s.nextElementSibling&&s.parentNode;)s=s.parentNode;s=s.nextElementSibling}}// No next element. Pick the first
return g.document.getElementById("blocker").innerHTML=i.restart,e.querySelector(".step")},y=function(){if(g){// Set notes to next steps notes.
var t=e.querySelector(".active").querySelector(".notes");t=t?t.innerHTML:i.noNotes,g.document.getElementById("notes").innerHTML=t;// Set the views
var s=e.URL.substring(0,e.URL.search("#/")),n=s+"#"+e.querySelector(".active").id,r=s+"#"+v().id,a=g.document.getElementById("slideView");a.src!==n&&(a.src=n);var o=g.document.getElementById("preView");o.src!==r&&(o.src=r),g.document.getElementById("status").innerHTML="<span class=\"moving\">"+i.moving+"</span>"}},h=function(){if(g){// We do everything here again, because if you stopped the previos step to
// early, the onstepleave trigger is not called for that step, so
// we need this to sync things.
var t=e.querySelector(".active").querySelector(".notes");t=t?t.innerHTML:i.noNotes;var s=g.document.getElementById("notes");s.innerHTML=t,s.scrollTop=0;// Set the views
var n=e.URL.substring(0,e.URL.search("#/")),r=n+"#"+e.querySelector(".active").id,a=n+"#"+v().id,o=g.document.getElementById("slideView");o.src!==r&&(o.src=r);var l=g.document.getElementById("preView");l.src!==a&&(l.src=a),g.document.getElementById("status").innerHTML="<span  class=\"ready\">"+i.ready+"</span>"}},b=function(e){g&&("next"===e.detail.reason&&E(),"prev"===e.detail.reason&&L())},E=function(){var e=g.document.getElementById("slideView");x(e,"impress:substep:show")},L=function(){var e=g.document.getElementById("slideView");x(e,"impress:substep:hide")},x=function(e,t,i){// Note: Unfortunately Chrome does not allow createEvent on file:// URLs, so this won't
// work. This does work on Firefox, and should work if viewing the presentation on a
// http:// URL on Chrome.
var s=e.contentDocument.createEvent("CustomEvent");s.initCustomEvent(t,!0,!0,i),e.contentDocument.dispatchEvent(s)},f=function(){var e=g.document.getElementById("notes");20<e.scrollTopMax-e.scrollTop?e.scrollTop+=.8*e.clientHeight:t.impress().next()},w=function(){g.timerStart=new Date},k=function(){var e=new Date,t=e.getHours(),s=e.getMinutes(),n=e.getSeconds(),r="";i.useAMPM&&(r=12>t?"AM":"PM",t=12<t?t-12:t,t=0===t?12:t);// Clock
var a=p(t)+":"+p(s)+":"+p(n)+" "+r;g.document.getElementById("clock").firstChild.nodeValue=a,n=m((e-g.timerStart)/1e3),s=m(n/60),n=m(n%60),g.document.getElementById("timer").firstChild.nodeValue=p(s)+"m "+p(n)+"s",g.initialized||(g.document.getElementById("slideView").contentWindow.scrollTo(0,0),g.document.getElementById("preView").contentWindow.scrollTo(0,0),g.initialized=!0)},C=function(e,t,i){void 0===i&&(i=g),i.document.addEventListener("keydown",function(t){t.ctrlKey||t.altKey||t.shiftKey||t.metaKey||-1===e.indexOf(t.keyCode)||t.preventDefault()},!1),i.document.addEventListener("keyup",function(i){i.ctrlKey||i.altKey||i.shiftKey||i.metaKey||-1===e.indexOf(i.keyCode)||(t(),i.preventDefault())},!1)},S=function(){var e=g.document.getElementById("slideView"),t=g.document.getElementById("preView");e.contentDocument.body.classList.add("impress-console"),t.contentDocument.body.classList.add("impress-console"),void 0!==l&&(e.contentDocument.head.insertAdjacentHTML("beforeend","<link rel=\"stylesheet\" type=\"text/css\" href=\""+l+"\">"),t.contentDocument.head.insertAdjacentHTML("beforeend","<link rel=\"stylesheet\" type=\"text/css\" href=\""+l+"\">")),e.addEventListener("load",function(){e.contentDocument.body.classList.add("impress-console"),void 0!==l&&e.contentDocument.head.insertAdjacentHTML("beforeend","<link rel=\"stylesheet\" type=\"text/css\" href=\""+l+"\">")}),t.addEventListener("load",function(){t.contentDocument.body.classList.add("impress-console"),void 0!==l&&t.contentDocument.head.insertAdjacentHTML("beforeend","<link rel=\"stylesheet\" type=\"text/css\" href=\""+l+"\">")})},I=function(){if(!top.isconsoleWindow)if(g&&!g.closed)g.focus();else{// If opening failes this may be because the browser prevents this from
// not (or less) interactive JavaScript...
if(g=t.open("","impressConsole"),null==g){// ... so I add a button to klick.
// workaround on firefox
var n=e.createElement("div");n.id="impress-console-button",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.backgroundColor="rgba(255, 255, 255, 0.9)";var r="var x = document.getElementById('impress-console-button');x.parentNode.removeChild(x);var r = document.getElementById('"+s+"');impress('"+s+"').lib.util.triggerEvent(r, 'impress:console:open', {})";return n.innerHTML="<button style=\"margin: 25vh 25vw;width:50vw;height:50vh;\" onclick=\""+r+"\">"+i.clickToOpen+"</button>",void e.body.appendChild(n)}var a="";return void 0!==o&&(a="<link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\""+o+"\">"),g.document.open(),g.document.write(// CssStyleStr is lots of inline <style></style> defined at the end of this file
"<!DOCTYPE html><html id=\"impressconsole\"><head>{{cssStyle}}{{cssLink}}</head><body><div id=\"console\"><div id=\"views\"><iframe id=\"slideView\" scrolling=\"no\"></iframe><iframe id=\"preView\" scrolling=\"no\"></iframe><div id=\"blocker\"></div></div><div id=\"notes\"></div></div><div id=\"controls\"> <div id=\"prev\"><a  href=\"#\" onclick=\"impress().prev(); return false;\" />{{prev}}</a></div><div id=\"next\"><a  href=\"#\" onclick=\"impress().next(); return false;\" />{{next}}</a></div><div id=\"clock\">--:--</div><div id=\"timer\" onclick=\"timerReset()\">00m 00s</div><div id=\"status\">{{loading}}</div></div></body></html>".replace("{{cssStyle}}",c()).replace("{{cssLink}}",a).replace(/{{.*?}}/gi,function(e){return i[e.substring(2,e.length-2)]})),g.document.title="Speaker Console ("+e.title+")",g.impress=t.impress,g.isconsoleWindow=!0,g.onload=S,g.timerStart=new Date,g.timerReset=w,g.clockInterval=setInterval(d[s].clockTick,1e3),C([33,37,38],t.impress().prev),C([34,39,40],t.impress().next),C([32],f),C([82],w),g.onbeforeunload=function(){clearInterval(g.clockInterval)},h(),g.initialized=!1,g.document.close(),t.onresize=D,g.onresize=D,g}},D=function(){var e=g.document.getElementById("slideView"),i=g.document.getElementById("preView"),s=t.innerHeight/t.innerWidth,o=g.document.getElementById("views"),l=e.offsetWidth-e.clientWidth,d=o.clientWidth-l,p=m(d*s),c=p+a,u=m(d*n),v=m(p*n);o.clientHeight-l<c+v&&(v=o.clientHeight-l-c,u=m(v/s)),u<=m(d*r)&&(d=o.clientWidth-l,p=m((o.clientHeight-l-a)/(1+r)),c=p+a,u=m(d*r),v=o.clientHeight-l-c),e.style.width=d+"px",e.style.height=p+"px",i.style.top=c+"px",i.style.width=u+"px",i.style.height=v+"px"},N=function(e,i){void 0===e?void 0!==u.dataset.consoleCss&&(o=u.dataset.consoleCss):o=e,void 0===i?void 0!==u.dataset.consoleCssIframe&&(l=u.dataset.consoleCssIframe):l=i,u.addEventListener("impress:stepleave",y),u.addEventListener("impress:stepenter",h),u.addEventListener("impress:substep:stepleaveaborted",b),u.addEventListener("impress:substep:show",E),u.addEventListener("impress:substep:hide",L),t.onunload=function(){g&&!g.closed&&g.close()},C([80],I,t),"true"===u.dataset.consoleAutolaunch&&t.open()};return u.addEventListener("impress:console:open",function(){I()}),u.addEventListener("impress:console:registerKeyEvent",function(e){C(e.detail.keyCodes,e.detail.handler,e.detail.window)}),d[s]={init:function(e,i){(void 0===e||"css/impressConsole.css"===e)&&(void 0===i||i==="css/iframe.css")&&t.console.log("impressConsole().init() is deprecated. impressConsole is now initialized automatically when you call impress().init()."),N(e,i)},open:I,clockTick:k,registerKeyEvent:C,_init:N},d[s]};e.addEventListener("impress:init",function(t){// Note: impressConsole wants the id string, not the DOM element directly
// Add 'P' to the help popup
m(t.target.id)._init(),s(e,"impress:help:add",{command:"P",text:"Presenter console",row:10})});// Returns a string to be used inline as a css <style> element in the console window.
// Apologies for length, but hiding it here at the end to keep it away from rest of the code.
var c=function(){return`<style>
            #impressconsole body {
                background-color: rgb(255, 255, 255);
                padding: 0;
                margin: 0;
                font-family: verdana, arial, sans-serif;
                font-size: 2vw;
            }

            #impressconsole div#console {
                position: absolute;
                top: 0.5vw;
                left: 0.5vw;
                right: 0.5vw;
                bottom: 3vw;
                margin: 0;
            }

            #impressconsole div#views, #impressconsole div#notes {
                position: absolute;
                top: 0;
                bottom: 0;
            }

            #impressconsole div#views {
                left: 0;
                right: 50vw;
                overflow: hidden;
            }

            #impressconsole div#blocker {
                position: absolute;
                right: 0;
                bottom: 0;
            }

            #impressconsole div#notes {
                left: 50vw;
                right: 0;
                overflow-x: hidden;
                overflow-y: auto;
                padding: 0.3ex;
                background-color: rgb(255, 255, 255);
                border: solid 1px rgb(120, 120, 120);
            }

            #impressconsole div#notes .noNotes {
                color: rgb(200, 200, 200);
            }

            #impressconsole div#notes p {
                margin-top: 0;
            }

            #impressconsole iframe {
                position: absolute;
                margin: 0;
                padding: 0;
                left: 0;
                border: solid 1px rgb(120, 120, 120);
            }

            #impressconsole iframe#slideView {
                top: 0;
                width: 49vw;
                height: 49vh;
            }

            #impressconsole iframe#preView {
                opacity: 0.7;
                top: 50vh;
                width: 30vw;
                height: 30vh;
            }

            #impressconsole div#controls {
                margin: 0;
                position: absolute;
                bottom: 0.25vw;
                left: 0.5vw;
                right: 0.5vw;
                height: 2.5vw;
                background-color: rgb(255, 255, 255);
                background-color: rgba(255, 255, 255, 0.6);
            }

            #impressconsole div#prev, div#next {
            }

            #impressconsole div#prev a, #impressconsole div#next a {
                display: block;
                border: solid 1px rgb(70, 70, 70);
                border-radius: 0.5vw;
                font-size: 1.5vw;
                padding: 0.25vw;
                text-decoration: none;
                background-color: rgb(220, 220, 220);
                color: rgb(0, 0, 0);
            }

            #impressconsole div#prev a:hover, #impressconsole div#next a:hover {
                background-color: rgb(245, 245, 245);
            }

            #impressconsole div#prev {
                float: left;
            }

            #impressconsole div#next {
                float: right;
            }

            #impressconsole div#status {
                margin-left: 2em;
                margin-right: 2em;
                text-align: center;
                float: right;
            }

            #impressconsole div#clock {
                margin-left: 2em;
                margin-right: 2em;
                text-align: center;
                float: left;
            }

            #impressconsole div#timer {
                margin-left: 2em;
                margin-right: 2em;
                text-align: center;
                float: left;
            }

            #impressconsole span.moving {
                color: rgb(255, 0, 0);
            }

            #impressconsole span.ready {
                color: rgb(0, 128, 0);
            }
        </style>`}}(document,window),function(e){"use strict";var t=function(t){for(var s=e.querySelectorAll(".step"),n=0;n<s.length;n++)if(s[n]===t)return n+1<s.length?s[n+1]:s[0]},i=function(t){for(var s=e.querySelectorAll(".step"),n=s.length-1;0<=n;n--)if(s[n]===t)return 0<=n-1?s[n-1]:s[s.length-1]};// Detect mobile browsers & add CSS class as appropriate.
// Add prev and next classes to the siblings of the newly entered active step element
// Remove prev and next classes from their current step elements
// Note: As an exception we break namespacing rules, as these are useful general purpose
// classes. (Naming rules would require us to use css classes mobile-next and mobile-prev,
// based on plugin name.)
e.addEventListener("impress:init",function(t){var i=e.body;/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)&&i.classList.add("impress-mobile");// Unset all this on teardown
var s=t.detail.api;s.lib.gc.pushCallback(function(){e.body.classList.remove("impress-mobile");var t=e.getElementsByClassName("prev")[0],i=e.getElementsByClassName("next")[0];"undefined"!=typeof t&&t.classList.remove("prev"),"undefined"!=typeof i&&i.classList.remove("next")})}),e.addEventListener("impress:stepenter",function(s){var n=e.getElementsByClassName("prev")[0],r=e.getElementsByClassName("next")[0],a=i(s.target);a.classList.add("prev");var o=t(s.target);o.classList.add("next"),"undefined"!=typeof n&&n.classList.remove("prev"),"undefined"!=typeof r&&r.classList.remove("next")})}(document),function(e,t){"use strict";var i,s=function(){// Mouse is now inactive
e.body.classList.add("impress-mouse-timeout")},n=function(){// Mouse is now active
// Then set new timeout after which it is considered inactive again
i&&t.clearTimeout(i),e.body.classList.remove("impress-mouse-timeout"),i=t.setTimeout(s,3000)};e.addEventListener("impress:init",function(s){var r=s.detail.api,a=r.lib.gc;// Set first timeout
// Unset all this on teardown
a.addEventListener(e,"mousemove",n),a.addEventListener(e,"click",n),a.addEventListener(e,"touch",n),n(),a.pushCallback(function(){t.clearTimeout(i),e.body.classList.remove("impress-mouse-timeout")})},!1)}(document,window),function(e){"use strict";var t,i,s,n,r,a,o,l=[],d=function(t,i,s){var n=e.createEvent("CustomEvent");n.initCustomEvent(i,!0,!0,s),t.dispatchEvent(n)},p=function(t){var i=e.createElement("div");return i.innerHTML=t,i.firstChild},m=function(){for(var e="",t=0;t<n.length;t++)// Omit steps that are listed as hidden from select widget
0>l.indexOf(n[t])&&(e=e+"<option value=\""+n[t].id+"\">"+// jshint ignore:line
n[t].id+"</option>\n");return e},c=function(e){i=e.detail.api;var l=i.lib.gc;s=e.target,n=s.querySelectorAll(".step");var c="<select id=\"impress-navigation-ui-select\" title=\"Go to\" class=\"impress-navigation-ui\">\n"+m()+"</select>";r=p("<button id=\"impress-navigation-ui-prev\" title=\"Previous\" class=\"impress-navigation-ui\">&lt;</button>"),r.addEventListener("click",function(){i.prev()}),a=p(c),a.addEventListener("change",function(e){i.goto(e.target.value)}),l.addEventListener(s,"impress:steprefresh",function(e){// As impress.js core now allows to dynamically edit the steps, including adding,
// removing, and reordering steps, we need to requery and redraw the select list on
// every stepenter event.
// Make sure the list always shows the step we're actually on, even if it wasn't
// selected from the list
n=s.querySelectorAll(".step"),a.innerHTML="\n"+m(),a.value=e.target.id}),o=p("<button id=\"impress-navigation-ui-next\" title=\"Next\" class=\"impress-navigation-ui\">&gt;</button>"),o.addEventListener("click",function(){i.next()}),d(t,"impress:toolbar:appendChild",{group:0,element:r}),d(t,"impress:toolbar:appendChild",{group:0,element:a}),d(t,"impress:toolbar:appendChild",{group:0,element:o})};// API for not listing given step in the select widget.
// For example, if you set class="skip" on some element, you may not want it to show up in the
// list either. Otoh we cannot assume that, or anything else, so steps that user wants omitted
// must be specifically added with this API call.
// Wait for impress.js to be initialized
e.addEventListener("impress:navigation-ui:hideStep",function(e){l.push(e.target),a&&(a.innerHTML=m())},!1),e.addEventListener("impress:init",function(i){t=e.querySelector("#impress-toolbar"),t&&c(i)},!1)}(document),function(e){"use strict";// Wait for impress.js to be initialized
e.addEventListener("impress:init",function(t){// Getting API from event data.
// So you don't event need to know what is the id of the root element
// or anything. `impress:init` event data gives you everything you
// need to control the presentation that was just initialized.
var i=t.detail.api,s=i.lib.gc,n=i.lib.util,r=function(e){// Don't trigger navigation for example when user returns to browser window with ALT+TAB
return!(e.altKey||e.ctrlKey||e.metaKey)&&(!(9!==e.keyCode)||!e.shiftKey&&(!!(32<=e.keyCode&&34>=e.keyCode||37<=e.keyCode&&40>=e.keyCode)||void 0));// In the case of TAB, we force step navigation always, overriding the browser
// navigation between input elements, buttons and links.
// With the sole exception of TAB, we also ignore keys pressed if shift is down.
};// KEYBOARD NAVIGATION HANDLERS
// Prevent default keydown action when one of supported key is pressed.
// Trigger impress action (next or prev) on keyup.
// Delegated handler for clicking on the links to presentation steps
// Delegated handler for clicking on step elements
// Add a line to the help popup
s.addEventListener(e,"keydown",function(e){r(e)&&e.preventDefault()},!1),s.addEventListener(e,"keyup",function(e){if(r(e)){if(e.shiftKey)switch(e.keyCode){case 9:i.prev();}else switch(e.keyCode){case 33:// Pg up
case 37:// Left
case 38:i.prev(e);break;case 9:// Tab
case 32:// Space
case 34:// Pg down
case 39:// Right
case 40:i.next(e);}e.preventDefault()}},!1),s.addEventListener(e,"click",function(t){// Event delegation with "bubbling"
// check if event target (or any of its parents is a link)
var s=t.target;try{for(;"A"!==s.tagName&&s!==e.documentElement;)s=s.parentNode;if("A"===s.tagName){var n=s.getAttribute("href");// If it's a link to presentation step, target this step
n&&"#"===n[0]&&(s=e.getElementById(n.slice(1)))}i.goto(s)&&(t.stopImmediatePropagation(),t.preventDefault())}catch(e){// For example, when clicking on the button to launch speaker console, the button
// is immediately deleted from the DOM. In this case target is a DOM element when
// we get it, but turns out to be null if you try to actually do anything with it.
if(e instanceof TypeError&&"target is null"===e.message)return;throw e}},!1),s.addEventListener(e,"click",function(t){var s=t.target;try{// Find closest step element that is not active
for(;(!s.classList.contains("step")||s.classList.contains("active"))&&s!==e.documentElement;)s=s.parentNode;i.goto(s)&&t.preventDefault()}catch(e){// For example, when clicking on the button to launch speaker console, the button
// is immediately deleted from the DOM. In this case target is a DOM element when
// we get it, but turns out to be null if you try to actually do anything with it.
if(e instanceof TypeError&&"target is null"===e.message)return;throw e}},!1),n.triggerEvent(e,"impress:help:add",{command:"Left &amp; Right",text:"Previous &amp; Next step",row:1})},!1)}(document),function(e){"use strict";function t(e){var t=n.indexOf(e);if(null!==a){var i=100/(n.length-1)*t;a.style.width=i.toFixed(2)+"%"}null!==o&&(o.innerHTML=t+"/"+(n.length-1))}var s,n=[],r=function(){n=[];for(var e=s.querySelectorAll(".step"),t=0;t<e.length;t++)n[t+1]=e[t].id};e.addEventListener("impress:init",function(e){s=e.target,r();var t=e.detail.api.lib.gc;t.pushCallback(function(){n=[],a&&(a.style.width=""),o&&(o.innerHTML="")})});var a=e.querySelector("div.impress-progressbar div"),o=e.querySelector("div.impress-progress");(null!==a||null!==o)&&(e.addEventListener("impress:stepleave",function(e){t(e.detail.next.id)}),e.addEventListener("impress:steprefresh",function(e){r(),t(e.target.id)}))}(document),function(e,t){"use strict";var s={},n=function(e,t){return isNaN(e)?t||0:+e},r=function(e,i){if("string"!=typeof e)return n(e,i);var s=e.match(/^([+-]*[\d\.]+)([wh])$/);if(null==s)return n(e,i);var r=parseFloat(s[1]),a="w"===s[2]?t.innerWidth:t.innerHeight;return r*a},a=function(e,t){var i=e.dataset;t||(t={x:0,y:0,z:0,relative:{x:0,y:0,z:0}});var s={x:n(i.x,t.x),y:n(i.y,t.y),z:n(i.z,t.z),relative:{x:r(i.relX,t.relative.x),y:r(i.relY,t.relative.y),z:r(i.relZ,t.relative.z)}};// Relative position is ignored/zero if absolute is given.
// Note that this also has the effect of resetting any inherited relative values.
return void 0!==i.x&&(s.relative.x=0),void 0!==i.y&&(s.relative.y=0),void 0!==i.z&&(s.relative.z=0),s.x+=s.relative.x,s.y+=s.relative.y,s.z+=s.relative.z,s};/**
     * Copied from core impress.js. We currently lack a library mechanism to
     * to share utility functions like this.
     */ // Register the plugin to be called in pre-init phase
// Register teardown callback to reset the data.x, .y, .z values.
t.impress.addPreInitPlugin(function(e){var t,n=e.querySelectorAll(".step");s[e.id]=[];for(var r,o=0;o<n.length;o++){r=n[o],s[e.id].push({el:r,x:r.getAttribute("data-x"),y:r.getAttribute("data-y"),z:r.getAttribute("data-z")});var l=a(r,t);// Apply relative position (if non-zero)
r.setAttribute("data-x",l.x),r.setAttribute("data-y",l.y),r.setAttribute("data-z",l.z),t=l}}),e.addEventListener("impress:init",function(e){var t=e.target;e.detail.api.lib.gc.pushCallback(function(){for(var e,i=s[t.id];e=i.pop();)null===e.x?e.el.removeAttribute("data-x"):e.el.setAttribute("data-x",e.x),null===e.y?e.el.removeAttribute("data-y"):e.el.setAttribute("data-y",e.y),null===e.z?e.el.removeAttribute("data-z"):e.el.setAttribute("data-z",e.z);delete s[t.id]})},!1)}(document,window),function(e,t){"use strict";// Wait for impress.js to be initialized
e.addEventListener("impress:init",function(i){var s=i.detail.api;// Rescale presentation when window is resized
s.lib.gc.addEventListener(t,"resize",s.lib.util.throttle(function(){// Force going to active step again, to trigger rescaling
s.goto(e.querySelector(".step.active"),500)},250),!1)},!1)}(document,window),function(e,t){"use strict";var i;e.addEventListener("impress:init",function(e){i=e.detail.api.lib.util},!1);var s=function(t){for(var s=e.querySelectorAll(".step"),n=0;n<s.length;n++)if(s[n]===t)return n+1<s.length?s[n+1]:s[0]},n=function(t){for(var s=e.querySelectorAll(".step"),n=s.length-1;0<=n;n--)if(s[n]===t)return 0<=n-1?s[n-1]:s[s.length-1]},r=function(e){e&&e.target&&(!e.detail.next.classList.contains("skip")||("next"===e.detail.reason?(e.detail.next=s(e.detail.next),r(e)):"prev"===e.detail.reason&&(e.detail.next=n(e.detail.next),r(e)),e.detail.transitionDuration=i.toNumber(e.detail.next.dataset.transitionDuration,e.detail.transitionDuration)))};// Register the plugin to be called in pre-stepleave phase
// The weight makes this plugin run early. This is a good thing, because this plugin calls
// itself recursively.
t.impress.addPreStepLeavePlugin(r,1)}(document,window),function(e,t){"use strict";// Register the plugin to be called in pre-stepleave phase
// The weight makes this plugin run fairly early.
t.impress.addPreStepLeavePlugin(function(e){return e&&e.target?!(e.target.classList.contains("stop")&&"next"===e.detail.reason)&&void 0:void 0},2)}(document,window),function(e,t){"use strict";// Copied from core impress.js. Good candidate for moving to src/lib/util.js.
var i=function(t,i,s){var n=e.createEvent("CustomEvent");n.initCustomEvent(i,!0,!0,s),t.dispatchEvent(n)},s=null;e.addEventListener("impress:stepenter",function(e){s=e.target},!1);var n=function(e){var t=e.querySelectorAll(".substep"),i=e.querySelectorAll(".substep-visible");if(0<t.length)return r(t,i)},r=function(e,t){if(t.length<e.length){var i=e[t.length];return i.classList.add("substep-visible"),i}},a=function(e){var t=e.querySelectorAll(".substep"),i=e.querySelectorAll(".substep-visible");if(0<t.length)return o(i)},o=function(e){if(0<e.length){var t=e[e.length-1];return t.classList.remove("substep-visible"),t}};// Register the plugin to be called in pre-stepleave phase.
// The weight makes this plugin run before other preStepLeave plugins.
// When entering a step, in particular when re-entering, make sure that all substeps are hidden
// at first
// API for others to reveal/hide next substep ////////////////////////////////////////////////
t.impress.addPreStepLeavePlugin(function(e){if(e&&e.target){var t,s=e.target;// Needed by jshint
return"next"===e.detail.reason&&(t=n(s),t)?(i(s,"impress:substep:stepleaveaborted",{reason:"next",substep:t}),!1):"prev"===e.detail.reason&&(t=a(s),t)?(i(s,"impress:substep:stepleaveaborted",{reason:"prev",substep:t}),!1):void 0}},1),e.addEventListener("impress:stepenter",function(e){for(var t=e.target,s=t.querySelectorAll(".substep-visible"),n=0;n<s.length;n++)s[n].classList.remove("substep-visible")},!1),e.addEventListener("impress:substep:show",function(){n(s)},!1),e.addEventListener("impress:substep:hide",function(){a(s)},!1)}(document,window),function(e){"use strict";var t=e.getElementById("impress-toolbar"),s=[],n=function(i){if(!s[i]){s[i]=e.createElement("span"),s[i].id="impress-toolbar-group-"+i;var n=r(i);n===void 0?t.appendChild(s[i]):t.insertBefore(s[i],s[n])}return s[i]},r=function(e){for(var t=e+1;!s[t]&&t<s.length;)t++;if(t<s.length)return t};t&&(t.addEventListener("impress:toolbar:appendChild",function(t){var e=n(t.detail.group);e.appendChild(t.detail.element)}),t.addEventListener("impress:toolbar:insertBefore",function(i){t.insertBefore(i.detail.element,i.detail.before)}),t.addEventListener("impress:toolbar:removeWidget",function(i){t.removeChild(i.detail.remove)}),e.addEventListener("impress:init",function(e){var i=e.detail.api;i.lib.gc.pushCallback(function(){t.innerHTML="",s=[]})}))}(document),function(e,t){"use strict";// Touch handler to detect swiping left and right based on window size.
// If the difference in X change is bigger than 1/20 of the screen width,
// we simply call an appropriate API function to complete the transition.
var i=Math.abs,s=0,n=0,r=0,a=t.innerWidth/20;e.addEventListener("touchstart",function(e){n=s=e.touches[0].clientX}),e.addEventListener("touchmove",function(e){var i=e.touches[0].clientX,a=i-s;// To be used in touchend
r=n-i,n=i,t.impress().swipe(a/t.innerWidth)}),e.addEventListener("touchend",function(){var o=n-s;i(o)>t.innerWidth/5&&0>=o*r?o>t.innerWidth/5&&0>=r?t.impress().prev():o<-t.innerWidth/5&&0<=r&&t.impress().next():i(r)>a?r<-a?t.impress().prev():r>a&&t.impress().next():t.impress().goto(e.querySelector("#impress .step.active"))}),e.addEventListener("touchcancel",function(){// Move (back) to the current slide
t.impress().goto(e.querySelector("#impress .step.active"))})}(document,window),function(e){e.addEventListener("impress:stepenter",function(t){if(t.target.dataset.addclasses){const i=t.target.dataset.addclasses.split(" ");i.forEach(t=>e.body.classList.add(t))}}),e.addEventListener("impress:stepleave",function(t){if(t.target.dataset.addclasses){const i=t.target.dataset.addclasses.split(" ");i.forEach(t=>e.body.classList.remove(t))}})}(document,window),function(e,t){const i=(e,i)=>{if(e){const s=e.split(".").reduce((e,t)=>e[t||{}],t);if("function"!=typeof s)throw`${e} is not a function`;s(i)}};e.addEventListener("impress:stepenter",e=>{i(e.target.dataset.funcEnter,e)}),e.addEventListener("impress:stepleave",e=>{i(e.target.dataset.funcLeave,e)})}(document,window);

